# -*- coding: utf-8 -*-
"""Covid19_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12kQxRBii0ruZ0mAMGrsyqR77itC4Khtk
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px

#Dataset 
confirmed_case_file = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
death_case_file = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'
recovered_case_file= 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'
country_wise_case_file = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv'

#Fatch Dataset files into data frame
confirmed_df = pd.read_csv(confirmed_case_file)
print(confirmed_df.shape)
confirmed_df.head()

#Fatch Dataset files into data frame
death_df = pd.read_csv(death_case_file)
print(death_df.shape)
death_df.head()

#Fatch Dataset files into data frame
recovered_df = pd.read_csv(recovered_case_file)
print(recovered_df.shape)
recovered_df.head()

#Fatch Dataset files into data frame
country_df = pd.read_csv(country_wise_case_file)
print(country_df.shape)
country_df.head()

#Check data for Canada
confirmed_df[confirmed_df["Country/Region"]=="Canada"]

confirmed_df[confirmed_df["Country/Region"]=="India"]

#Total number of Countries
confirmed_df["Country/Region"].nunique()

#Replacing null values
confirmed_df = confirmed_df.replace(np.nan,'', regex=True)
confirmed_df.head()

#Replacing null values
death_df = death_df.replace(np.nan,'',regex = True)
death_df.head()

#Replacing null values
recovered_df= recovered_df.replace(np.nan,'',regex = True)
recovered_df.head()

#Replacing null values
country_df = country_df.replace(np.nan,'',regex = True)
country_df.head()

#Total Count of Cases
global_data = country_df.copy().drop(['Lat','Long_','Country_Region','Last_Update','ISO3','People_Hospitalized','People_Tested','UID','Mortality_Rate'],axis = 1)
global_summary = pd.DataFrame(global_data.sum()).transpose()
global_summary

#Total Count of confirmed case everyday
confirmed_total = confirmed_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis = 1)
confirmed_summary = confirmed_total.sum()
confirmed_summary

confirmed_to_fig = go.Figure(data=go.Scatter(x=confirmed_summary.index,y= confirmed_summary.values,mode='lines+markers'))
confirmed_to_fig.update_layout(title = 'Total number of cases everyday')
confirmed_to_fig.show()

#Calculate Active Cases=(Confirmed-Receovered-Deatch)
confirmed_total = confirmed_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis = 1).sum()

death_total = death_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis = 1).sum()

recovered_total = recovered_df.copy().drop(['Lat','Long','Country/Region','Province/State'],axis = 1).sum()

active_cases = pd.Series( data=[x1-x2-x3 for (x1,x2,x3) in zip(confirmed_total.values,death_total.values,recovered_total.values)], index=confirmed_total.index
)

active_cases_fig = go.Figure(data=go.Scatter(x=active_cases.index,y= active_cases.values,mode='lines+markers'))
active_cases_fig.update_layout(title = 'Total number of Active cases everyday')
active_cases_fig.show()

#Country wise level
country_df.copy().drop(['Lat','Long_','Last_Update','People_Tested','People_Hospitalized','Incident_Rate','ISO3','UID'],axis = 1).sort_values('Confirmed',ascending = False).reset_index(drop = True).style.bar(align = 'left',width = 98)